a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 28
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 29
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 30
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 32
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 31
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 32
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 33
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 34
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 35
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 36
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 37
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 38
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 39
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 40
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
s <- 41
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
############################
# Module to create arc diagram from edge list
#load pack "arcdaigram"
# require(arcdiagram)
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
doc.object <- xmlTreeParse(file = "../graph_theory/source.xml")
top <- xmlRoot(doc.object)
s <- 42
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5)
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = s)
s <- 43
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = s)
title <- "sentence"
c(title, s)
title <- "sentence "
paste(sentence, s)
paste(title, s)
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = paste(title, s) )
s <- 44
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = paste(title, s) )
s <- 45
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = paste(title, s) )
s <- 46
# extract all @id attrubutes from <word> elements in indexed sentence of "top"
a <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "id"))
# extract all @head attributes from <word> elementes in indexed sentence of "top"
b <- xmlSApply(top[[s]], function(x) xmlGetAttr(x, "head"))
# convert vectors from character to numeric
a <- as.numeric(a)
b <- as.numeric(b)
# create and edge matrix from the @id ("a") and @head vectors ("b")
# first create matrix with one column (ncol = 1) and a row for each element in "a"
edge.matrix <- matrix(a, ncol=1)
# add elements of "b" as second column
edge.matrix <- cbind(edge.matrix, b)
# delete all rows of "edge.maatrix" where @head = 0. This step eliminates all punctuation from consideration.
# Likewise, the root element of the sentence is linked only with these tokens dependent on in, not with a theoretical "root".
# First, create "index" containing row numbers of all rows with @head greater than 0.
index <- which(edge.matrix[, 2] > 0)
# Use "index" to create new matrix.
short.edge.matrix <- edge.matrix[index, ]
# Call "archplot()" to create diagram to visualize edge crossing in sentences.
arcplot(short.edge.matrix, las = 1, sorted = TRUE, lwd.arcs = 5, main = paste(title, s) )
