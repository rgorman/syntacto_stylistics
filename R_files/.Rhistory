c <- NULL
d <- NULL
i <- 7
for (i in i:length(top))  {
# uses xmlSApply() to loop through the <word> elements of each sentence.
# xmlSApply() calls the function xmlGetAttr() and outputs a vector of contents of @head attributes.
# The output is stored in variable "a". as.numeric() converts output from character vector to numbers
a <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "head")))
# The same extraction applied to the @id attribute of each <word> element.
# The result is stored in variable "b".
b <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "id")))
# These lines use which() to remove @head=0 items from "a" and "b".
# The results are stored in variables "c" and "d".
c <- a[-which(a == 0)]
d <- b[-which(a == 0)]
# Uses addAttributes() to add @DepDist attribute and value to each <seentence> element in "top".
# Computes mean of absolute value of difference of corresponding @head and @id
# from vectors in variables "c" and "d". Result is rounded to 4 decimal places.
top[[i]] <- addAttributes(top[[i]], DepDist = round(mean(abs(c-d)),4))
}
top[[7]]
saveXML(top, file = "../Projectivity/working/Result_DD_Polybius21.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Xen_Cyr1.xml")
top <- xmlRoot(doc.object)
top[[7]]
a <- NULL
b <- NULL
c <- NULL
d <- NULL
# Sets increment variable to first <sentence> element in file.
i <- 7
for (i in i:length(top))  {
# uses xmlSApply() to loop through the <word> elements of each sentence.
# xmlSApply() calls the function xmlGetAttr() and outputs a vector of contents of @head attributes.
# The output is stored in variable "a". as.numeric() converts output from character vector to numbers
a <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "head")))
# The same extraction applied to the @id attribute of each <word> element.
# The result is stored in variable "b".
b <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "id")))
# These lines use which() to remove @head=0 items from "a" and "b".
# The results are stored in variables "c" and "d".
c <- a[-which(a == 0)]
d <- b[-which(a == 0)]
# Uses addAttributes() to add @DepDist attribute and value to each <seentence> element in "top".
# Computes mean of absolute value of difference of corresponding @head and @id
# from vectors in variables "c" and "d". Result is rounded to 4 decimal places.
top[[i]] <- addAttributes(top[[i]], DepDist = round(mean(abs(c-d)),4))
}
top[[7]]
saveXML(top, file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_CiCDeFin1.xml")
top <- xmlRoot(doc.object)
top[[7]]
top[[5]]
top[[4]]
top[[5]]
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 5
for (i in i:length(top))  {
# uses xmlSApply() to loop through the <word> elements of each sentence.
# xmlSApply() calls the function xmlGetAttr() and outputs a vector of contents of @head attributes.
# The output is stored in variable "a". as.numeric() converts output from character vector to numbers
a <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "head")))
# The same extraction applied to the @id attribute of each <word> element.
# The result is stored in variable "b".
b <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "id")))
# These lines use which() to remove @head=0 items from "a" and "b".
# The results are stored in variables "c" and "d".
c <- a[-which(a == 0)]
d <- b[-which(a == 0)]
# Uses addAttributes() to add @DepDist attribute and value to each <seentence> element in "top".
# Computes mean of absolute value of difference of corresponding @head and @id
# from vectors in variables "c" and "d". Result is rounded to 4 decimal places.
top[[i]] <- addAttributes(top[[i]], DepDist = round(mean(abs(c-d)),4))
}
saveXML(top, file = "../Projectivity/working/Result_DD_CicDeFin1.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
top[[5]]
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_CiCDeFin1.xml")
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_CiCDeFin1.xml")
top <- xmlRoot(doc.object)
top[[5]]
top[[4]]
top[[5]]
i <- 5
xmlGetAttr(top[[5]], "DepDist")
a <- xmlGetAttr(top[[5]], "DepDist")
class(a)
as.numeric (a) <- xmlGetAttr(top[[5]], "DepDist")
a <- as.numeric(xmlGetAttr(top[[5]], "DepDist"))
class(a)
a <- NULL
b <- NULL
i <- 5
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[5]], "DepDist"))
b <- append(b, a)
}
a <- NULL
b <- NULL
i <- 5
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
}
mean(b)
sd(b)
summary(b)
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[5]]
top[[7]]
i <- 7
a <- NULL
b <- NULL
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
}
mean(b)
mean(b)
sd(b)
summary(b)
which(b == NA)
which(b == "NA")
b
which(b=="NaN")
top[[93]]
top[[92]]
which(b=="NaN")
b[[86]]
b <- b[[-86]]
b <- b-[[86]]
b[[-83]]
b[-83]
which(b=="NaN")
b[-86]
b <- b[-86]
mean(b)
sd(b)
summary(b)
top[[length(top)]]
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_XenCyr1.xml")
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml")
top[[7]]
a <- NULL
b <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
}
mean(b)
which(b=="NaN")
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
d
top[[length(top)]]
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[7]]
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Polybius21.xml")
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[5]]
top[[6]]
top[[7]]
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[7]]
length(top[[7]]:top[[length(top)]] )
length(top)
length(7:length(top))
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
mean(b)
summary(b)
d
time_dataframe <- read.csv(file = "../Projectivity/working/Time.Plb21.csv")
time_dataframe <- read.csv(file = "../Projectivity/working/Times.Plb21.csv")
time_dataframe <- read.csv(file = "../Projectivity/working/Times_Plb21.csv")
matrix <- as.matrix(time_dataframe)
View(time_dataframe)
View(matrix)
View(time_dataframe)
d
b
time_dataframe$DepDist <- b
View(time_dataframe)
time_dataframe$topSentNum <- d
View(time_dataframe)
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[7]]
# wrapper varaibles for processing
a <- NULL
b <- NULL
c <- NULL
d <- NULL
# Sets increment variable to first <sentence> element in file.
i <- 7
for (i in i:length(top))  {
# uses xmlSApply() to loop through the <word> elements of each sentence.
# xmlSApply() calls the function xmlGetAttr() and outputs a vector of contents of @head attributes.
# The output is stored in variable "a". as.numeric() converts output from character vector to numbers
a <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "head")))
# The same extraction applied to the @id attribute of each <word> element.
# The result is stored in variable "b".
b <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "id")))
# These lines use which() to remove @head=0 items from "a" and "b".
# The results are stored in variables "c" and "d".
c <- a[-which(a == 0)]
d <- b[-which(a == 0)]
# Uses addAttributes() to add @DepDist attribute and value to each <seentence> element in "top".
# Computes mean of absolute value of difference of corresponding @head and @id
# from vectors in variables "c" and "d". Result is rounded to 4 decimal places.
top[[i]] <- addAttributes(top[[i]], DepDist = round(mean(abs(c-d)),4))
}
top[[7]]
saveXML(top, file = "../Projectivity/working/Result_DD_Polybius21.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Polybius21.xml")
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Polybius21.xml")
top <- xmlRoot(doc.object)
top[[7]]
# A loop to extract @head and @id attributes from word elements and use them to compute Dependency Distance.
# The loop should start with the subset of "top" which represents the first sentence element.
# wrapper varaibles for processing
a <- NULL
b <- NULL
c <- NULL
d <- NULL
# Sets increment variable to first <sentence> element in file.
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
time_dataframe <- read.csv(file = "../Projectivity/working/Times_Plb21.csv")
time_dataframe$DepDist <- b
time_dataframe$topSentNum <- d
View(time_dataframe)
plot(time_dataframe$dependency, time_dataframe$words)
colnames(time_dataframe)
plot(time_dataframe$depPerWord, time_dataframe$words)
lines(lowess(time_dataframe$depPerWord, time_dataframe$words), col="blue") # lowess line (x,y)
plot(time_dataframe$depPerWord, time_dataframe$DepDist)
lines(lowess(time_dataframe$depPerWord, time_dataframe$DepDist), col="blue") # lowess line (x,y)
time <- time_dataframe$depPerWord
test_variable <- time_dataframe$DepDist
cor(time, test_variable)
colnames(time_dataframe)
test_variable <- time_dataframe$words
cor(time, test_variable)
hist(test_variable)
test_variable <- time_dataframe$DepDist
hist(test_variable)
hist(time)
summary(time)
summary(test_variable)
which(time_dataframe$depPerWord > 4)
which(time_dataframe$depPerWord < 4)
which(time_dataframe$depPerWord < 3.5)
index <- which(time_dataframe$depPerWord < 3.5)
test_variable <- time_dataframe$DepDist[index,]
test_variable <- time_dataframe$DepDist[index]
time <- time_dataframe$depPerWord{index}
time <- time_dataframe$depPerWord[index]
cor(time, test_variable)
time
plot(time, test_variable)
lines(lowess(time, test_variable), col="blue") # lowess line (x,y)
hist(time)
hist(test_variable)
summary(test_variable)
summary(time)
require(e1071)
skewness(test_variable)
write.csv(time_dataframe, file = "../Projectivity/working/working_Plb21.csv")
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_Xen_Cyr1.xml")
doc.object <- xmlTreeParse(file = "../Projectivity/working/Resul_DDt_Xen_Cyr1.xml")
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml")
top <- xmlRoot(doc.object)
top[[7]]
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
which(a=="NaN")
which(b =="NaN")
which(c =="NaN")
which(d =="NaN")
a
b
which(b == "NA")
which(b == NA)
which(b == is.na())
is.na(b)
which (is.na(b))
d[166]
d
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Xen_Cyr1.xml")
top <- xmlRoot(doc.object)
top[[7]]
# A loop to extract @head and @id attributes from word elements and use them to compute Dependency Distance.
# The loop should start with the subset of "top" which represents the first sentence element.
# wrapper varaibles for processing
a <- NULL
b <- NULL
c <- NULL
d <- NULL
# Sets increment variable to first <sentence> element in file.
i <- 7
for (i in i:length(top))  {
# uses xmlSApply() to loop through the <word> elements of each sentence.
# xmlSApply() calls the function xmlGetAttr() and outputs a vector of contents of @head attributes.
# The output is stored in variable "a". as.numeric() converts output from character vector to numbers
a <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "head")))
# The same extraction applied to the @id attribute of each <word> element.
# The result is stored in variable "b".
b <- as.numeric(xmlSApply(top[[i]], function(x) xmlGetAttr(x, "id")))
# These lines use which() to remove @head=0 items from "a" and "b".
# The results are stored in variables "c" and "d".
c <- a[-which(a == 0)]
d <- b[-which(a == 0)]
# Uses addAttributes() to add @DepDist attribute and value to each <seentence> element in "top".
# Computes mean of absolute value of difference of corresponding @head and @id
# from vectors in variables "c" and "d". Result is rounded to 4 decimal places.
top[[i]] <- addAttributes(top[[i]], DepDist = round(mean(abs(c-d)),4))
}
top[[7]]
saveXML(top, file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml")
top <- xmlRoot(doc.object)
top[[7]]
# A loop to extract @head and @id attributes from word elements and use them to compute Dependency Distance.
# The loop should start with the subset of "top" which represents the first sentence element.
# wrapper varaibles for processing
a <- NULL
b <- NULL
c <- NULL
d <- NULL
# Sets increment variable to first <sentence> element in file.
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
which (is.na(b))
time_dataframe <- read.csv(file = "../Projectivity/working/Times_XenCyr1.csv")
View(time_dataframe)
time_dataframe$DepDist <- b
time_dataframe$topSentNum <- d
View(time_dataframe)
colnames(time_dataframe)
plot(time_dataframe$depPerWord, time_dataframe$words)
lines(lowess(time_dataframe$depPerWord, time_dataframe$words), col="blue") # lowess line (x,y)
plot(time_dataframe$depPerWord, time_dataframe$DepDist)
lines(lowess(time_dataframe$depPerWord, time_dataframe$DepDist), col="blue") # lowess line (x,y)
time <- time_dataframe$depPerWord[index]
test_variable <- time_dataframe$DepDist[index]
cor(time, test_variable)
test_variable <- time_dataframe$DepDist[index]
cor(time, test_variable)
time <- time_dataframe$depPerWord
test_variable <- time_dataframe$DepDist
hist(test_variable)
hist(time)
cor(time, test_variable)
summary(time)
summary(test_variable)
which(test_variable > 10)
top[[7]]
saveXML(top, file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
saveXML(top, file = "../Projectivity/working/Result_DD_Xen_Cyr1.xml", prefix = '<?xml version="1.0" encoding="UTF-8"?>\n')
which(test_variable > 10)
top[7+69]
top[[7+69]]
which(test_variable > 10)
top[[7+289]]
summary(time)
summary(test_variable)
index <- which(time_dataframe$depPerWord < 4.034)
hist(time[index])
skewness(time[index])
cor(time[index], test_variable[index])
time <- time_dataframe$depPerWord
test_variable <- time_dataframe$DepDist
index <- which(time_dataframe$depPerWord < 4.034)
hist(time[index])
summary(time[index])
summary(test_variable[index])
hist(test_variable[index])
plot(time, test_variable)
lines(lowess(time, test_variable), col="blue") # lowess line (x,y)
plot(time[index], test_variable[index])
lines(lowess(time[index], test_variable[index]), col="blue") # lowess line (x,y)
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Combined.xml")
top <- xmlRoot(doc.object)
top[[7]]
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
which (is.na(b))
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/Result_DD_Combined.xml")
top <- xmlRoot(doc.object)
a <- NULL
b <- NULL
c <- NULL
d <- NULL
i <- 7
for (i in i:length(top)) {
a <- as.numeric(xmlGetAttr(top[[i]], "DepDist"))
b <- append(b, a)
c <- as.numeric(xmlGetAttr(top[[i]], "id"))
d <- append(d, c)
}
time_dataframe <- read.csv(file = "../Projectivity/working/Times_Combined.csv")
View(time_dataframe)
time_dataframe$DepDist <- b
time_dataframe$topSentNum <- d
View(time_dataframe)
colnames(time_dataframe)
plot(time_dataframe$depPerWord, time_dataframe$words)
cor(ime_dataframe$depPerWord, time_dataframe$words)
cor(time_dataframe$depPerWord, time_dataframe$words)
summary(time_dataframe$words)
summary(time_dataframe$DepDist)
cor(time_dataframe$depPerWord, time_dataframe$DepDist)
plot(time_dataframe$depPerWord, time_dataframe$DepDist)
lines(lowess(time_dataframe$depPerWord, time_dataframe$DepDist), col="blue") # lowess line (x,y)
time <- time_dataframe$depPerWord
test_variable <- time_dataframe$DepDist
hist(time)
hist(test_variable)
summary(time)
index <- which(time_dataframe$depPerWord < 3.620)
summary(time[index])
index <- which(time_dataframe$depPerWord < 3.63)
summary(time)
summary(time[index])
hist(time[index])
summary(test_variable[index])
hist(test_variable[index])
cor(time[index], test_variable[index])
plot(time[index], test_variable[index])
lines(lowess(time[index], test_variable[index]), col="blue") # lowess line (x,y)
cor(time_dataframe$words, time_dataframe$DepDist)
write.csv(time_dataframe, file = "../Projectivity/working/working_Combined.csv")
rm(list = ls())
doc.object <- xmlTreeParse(file = "../Projectivity/working/DD_Xen_Cyr1.xml")
top <- xmlRoot(doc.object)
top[[7]]
top[[7]][[1]]
xmlGetAttr(top[[7]][1], "postag")
class(top[[7]])
class(top[[7]][1])
xmlSApply(top[[7]], function(x), xmlGetAttr(x, "postag"))
xmlSApply(top[[7]], function(x) xmlGetAttr(x, "postag"))
a <- xmlSApply(top[[7]], function(x) xmlGetAttr(x, "postag"))
as.vector(a)
grep("v", a)
grep("u---", a)
length(a)
length(a-length(grep("u---", a)))
